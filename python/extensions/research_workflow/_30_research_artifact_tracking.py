from python.helpers.extension import Extension
from agent import Agent, LoopData
from python.extensions.research_workflow._10_research_session_start import (
    get_research_session, update_research_session, is_research_session_active
)
from datetime import datetime

class ResearchArtifactTracking(Extension):
    async def execute(self, loop_data: LoopData = LoopData(), **kwargs):
        """Track creation of research artifacts during active sessions"""
        
        if not is_research_session_active(self.agent):
            return
        
        # Check tool response for artifact creation indicators - these would need to be passed via kwargs
        # For now, we'll skip artifact tracking as iteration_data doesn't exist
        tool_response = kwargs.get("tool_response", "")
        tool_name = kwargs.get("tool_name", "")
        
        # Indicators that an artifact was created
        artifact_indicators = [
            "saved to memory",
            "generated by sakana",
            "research findings saved",
            "experiment design saved", 
            "academic paper saved",
            "peer review saved"
        ]
        
        artifact_created = any(indicator in tool_response.lower() for indicator in artifact_indicators)
        
        if artifact_created and "sakana" in tool_name:
            session_data = get_research_session(self.agent)
            
            # Determine artifact type based on tool
            artifact_type = "unknown"
            if "research" in tool_name:
                artifact_type = "research_findings"
            elif "experiment" in tool_name:
                artifact_type = "experiment_design"
            elif "paper" in tool_name:
                artifact_type = "academic_paper"
            elif "peer" in tool_name:
                artifact_type = "peer_review"
            
            # Track artifact creation
            artifacts = session_data.get("artifacts_created", [])
            if isinstance(artifacts, int):
                artifacts = []
            
            artifact_record = {
                "type": artifact_type,
                "tool": tool_name,
                "timestamp": datetime.now().isoformat(),
                "session_id": session_data.get("session_id", "unknown")
            }
            
            artifacts.append(artifact_record)
            
            # Update session data
            updates = {
                "artifacts_created": artifacts,
                "total_artifacts": len(artifacts),
                "last_artifact_type": artifact_type,
                "last_artifact_time": datetime.now().isoformat(),
                "last_activity": datetime.now().isoformat()
            }
            
            update_research_session(self.agent, updates)
            
            # Log artifact creation
            self.agent.context.log.log(
                type="info",
                heading=f"Research Artifact Created: {artifact_type}",
                content=f"Created {artifact_type} using {tool_name} at {artifact_record['timestamp']}"
            )


def get_research_artifacts(agent: Agent) -> dict:
    """Get research artifact creation statistics"""
    session_data = get_research_session(agent)
    artifacts = session_data.get("artifacts_created", [])
    
    if isinstance(artifacts, int):
        artifacts = []
    
    # Count by type
    artifact_counts = {}
    for artifact in artifacts:
        if isinstance(artifact, dict):
            artifact_type = artifact.get("type", "unknown")
            artifact_counts[artifact_type] = artifact_counts.get(artifact_type, 0) + 1
    
    return {
        "artifacts": artifacts,
        "total_count": len(artifacts),
        "by_type": artifact_counts,
        "last_artifact": session_data.get("last_artifact_type", "None"),
        "last_time": session_data.get("last_artifact_time", "Unknown")
    }