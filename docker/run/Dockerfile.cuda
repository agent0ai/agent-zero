# Use the NVIDIA CUDA base image with Ubuntu
FROM nvidia/cuda:12.8.1-base-ubuntu22.04

# Set non-interactive installation
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=Etc/UTC

# Check if the argument is provided, else throw an error
ARG BRANCH
RUN if [ -z "$BRANCH" ]; then echo "ERROR: BRANCH is not set!" >&2; exit 1; fi
ENV BRANCH=$BRANCH

# Copy contents of the project to /a0
COPY ./fs/ /

# pre installation steps - use CUDA-specific script
RUN bash /ins/pre_install_cuda.sh $BRANCH

# Sanitize thinking tags from all relevant files
RUN find /a0 -type f -name "*.py" -o -name "*.js" -o -name "*.html" | xargs -I {} bash /ins/sanitize_tags.sh {}

# install additional software
RUN bash /ins/install_additional.sh $BRANCH

# Install CUDA-specific dependencies with version pinning
RUN apt-get update && apt-get install -y --no-install-recommends \
    cuda-nvcc-12-8 \
    cuda-cudart-dev-12-8 \
    libcublas-dev-12-8 \
    libcudnn8 \
    libcudnn8-dev \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Set CUDA environment variables
ENV PATH=/usr/local/cuda/bin:${PATH}
ENV LD_LIBRARY_PATH=/usr/local/cuda/lib64:${LD_LIBRARY_PATH}
ENV CUDA_HOME=/usr/local/cuda
ENV CUDA_PATH=/usr/local/cuda
ENV CUDA_VERSION=12.8.1

# Install Python build dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    python3-dev \
    python3-pip \
    python3-setuptools \
    python3-wheel \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Install PyTorch with CUDA support - using versions matching the user's environment
RUN pip3 install --upgrade pip setuptools wheel --root-user-action=ignore && \
    pip3 uninstall -y torch torchvision triton faiss-cpu huggingface_hub diffusers transformers xformers || true && \
    # Install PyTorch with CUDA 12.4
    pip3 install --no-cache-dir torch==2.6.0+cu124 torchvision --index-url https://download.pytorch.org/whl/cu124 --root-user-action=ignore && \
    # Install xformers
    pip3 install --no-cache-dir xformers==0.0.29.post3 --root-user-action=ignore && \
    # Install all other dependencies with exact versions to match user's environment
    pip3 install --no-cache-dir Pillow==10.1.0 --root-user-action=ignore && \
    pip3 install --no-cache-dir safetensors==0.4.1 scipy==1.15.2 --root-user-action=ignore && \
    pip3 install --no-cache-dir huggingface_hub==0.20.3 --root-user-action=ignore && \
    pip3 install --no-cache-dir transformers==4.38.2 accelerate==0.21.0 --root-user-action=ignore && \
    # Install diffusers to match user's version
    pip3 install --no-cache-dir diffusers==0.19.3 --root-user-action=ignore && \
    # Create a test script to verify all critical imports
    echo 'import torch; print(f"PyTorch: {torch.__version__}"); print(f"CUDA: {torch.cuda.is_available()}"); import huggingface_hub; print(f"huggingface_hub: {huggingface_hub.__version__}"); from huggingface_hub import cached_download; import diffusers; print(f"diffusers: {diffusers.__version__}"); from diffusers import StableDiffusionPipeline; import safetensors; import transformers; import xformers; print(f"xformers: {xformers.__version__}"); print("All imports successful!")' > /tmp/verify_imports.py && \
    python3 /tmp/verify_imports.py || echo "Verification completed with warnings" && \
    # Create stable diffusion output directory
    mkdir -p /root/generated_images

# Don't attempt to install stable-diffusion-cpp-python, use fallback image generation instead
# as it requires complex build environment and can fail


# Install faiss with CUDA support through conda
RUN apt-get update && apt-get install -y wget && \
    wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh && \
    bash miniconda.sh -b -p /opt/conda && \
    rm miniconda.sh && \
    ln -s /opt/conda/bin/conda /usr/bin/conda && \
    /opt/conda/bin/conda install -y -c conda-forge faiss-gpu && \
    cp -r /opt/conda/lib/python*/site-packages/faiss* /usr/local/lib/python3.12/dist-packages/ && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# install A0
RUN bash /ins/install_A0.sh $BRANCH

# cleanup repo and install A0 without caching, this speeds up builds
ARG CACHE_DATE=none
RUN echo "cache buster $CACHE_DATE" && bash /ins/install_A02.sh $BRANCH

# Add Playwright environment variables to ensure proper browser installation
ENV PLAYWRIGHT_BROWSERS_PATH=/root/.cache/ms-playwright
ENV PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=0

# Install Playwright dependencies - these are required for browser operation
RUN apt-get update && apt-get install -y \
    libnss3 \
    libnspr4 \
    libatk1.0-0 \
    libatk-bridge2.0-0 \
    libcups2 \
    libdrm2 \
    libxkbcommon0 \
    libxcomposite1 \
    libxdamage1 \
    libxfixes3 \
    libxrandr2 \
    libgbm1 \
    libasound2 \
    libpango-1.0-0 \
    libcairo2 \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# post installation steps
RUN bash /ins/post_install.sh $BRANCH

# Expose ports
EXPOSE 22 80

# initialize runtime with sanitize_tags to filter thinking tags from output
# CMD ["/bin/bash", "-c", "/ins/sanitize_tags.sh /bin/bash /exe/initialize.sh $BRANCH"] 

# initialize runtime
CMD ["/bin/bash", "-c", "/bin/bash /exe/initialize.sh $BRANCH"]